#!/usr/bin/env node

// Native
import path from 'path'
import {parse} from 'url'

// Packages
import {StringDecoder} from 'string_decoder'
import micro, {send} from 'micro'
import {red, green} from 'chalk'
import args from 'args'
import {compile} from 'handlebars'
import {isBinarySync as isBinary} from 'istextorbinary'
import filesize from 'filesize'
import mime from 'mime-types'
import compress from 'micro-compress'
import fs from 'fs-promise'

args
  .option('port', 'Port to listen on', process.env.PORT || 3000)
  .option('cache', 'How long static files should be cached in the browser (seconds)', 3600)
  .option('single', 'Serve single page apps with only one index.html')
  .option('unzipped', 'Disable GZIP compression')

const flags = args.parse(process.argv)
const directory = args.sub[0]

process.env.ASSET_DIR = '/' + Math.random().toString(36).substr(2, 10)

let current = process.cwd()

if (directory) {
  current = path.resolve(process.cwd(), directory)
}

const isDir = async dir => {
  let stats

  try {
    stats = await fs.stat(dir)
  } catch (err) {
    return false
  }

  if (stats.isDirectory()) {
    return true
  }

  return false
}

const prepareView = () => {
  let viewContent = false
  const viewPath = path.normalize(path.join(__dirname, '/../../views/index.hbs'))

  try {
    viewContent = fs.readFileSync(viewPath, 'utf8')
  } catch (err) {
    throw err
  }

  return compile(viewContent)
}

const ignoredFiles = [
  '.DS_Store',
  '.git/'
]

const renderDirectory = async dir => {
  let files = []
  const subPath = path.relative(current, dir)

  if (!fs.existsSync(dir)) {
    return false
  }

  try {
    files = await fs.readdir(dir)
  } catch (err) {
    throw err
  }

  for (const file of files) {
    const filePath = path.resolve(dir, file)
    const index = files.indexOf(file)
    const details = path.parse(filePath)

    details.ext = details.ext.split('.')[1]
    details.relative = path.join(subPath, details.base)

    if (await isDir(filePath)) {
      details.base += '/'
    } else {
      let fileStats

      try {
        fileStats = await fs.stat(filePath)
      } catch (err) {
        throw err
      }

      details.size = filesize(fileStats.size, {round: 0})
    }

    if (ignoredFiles.indexOf(details.base) > -1) {
      delete files[index]
    } else {
      files[files.indexOf(file)] = details
    }
  }

  const directory = path.join(path.basename(current), subPath, '/')
  const pathParts = directory.split('/')

  if (dir.indexOf(current + '/') > -1) {
    const directoryPath = [...pathParts]
    directoryPath.shift()

    files.unshift({
      base: '..',
      relative: path.join(...directoryPath, '..')
    })
  }

  const render = prepareView()

  const paths = []
  pathParts.pop()

  for (const part in pathParts) {
    if (!{}.hasOwnProperty.call(pathParts, part)) {
      continue
    }

    let before = 0
    const parents = []

    while (before <= part) {
      parents.push(pathParts[before])
      before++
    }

    parents.shift()

    paths.push({
      name: pathParts[part],
      url: parents.join('/')
    })
  }

  const details = {
    port: flags.port,
    files,
    assetDir: process.env.ASSET_DIR,
    directory,
    nodeVersion: process.version.split('v')[1],
    paths
  }

  return render(details)
}

const handler = async (req, res) => {
  const {pathname} = parse(req.url)
  let related = path.parse(path.join(current, pathname))

  if (related.dir.indexOf(process.env.ASSET_DIR) > -1) {
    const relative = path.relative(process.env.ASSET_DIR, pathname)
    related = path.parse(path.join(__dirname, '/../assets', relative))
  }

  related = decodeURIComponent(path.format(related))

  let notFoundResponse = 'Not Found'

  try {
    const custom404Path = path.join(current, '/404.html')
    notFoundResponse = await fs.readFile(custom404Path, 'utf-8')
  } catch (err) {}

  if (!fs.existsSync(related) && flags.single === undefined) {
    return send(res, 404, notFoundResponse)
  }

  // Check if file or directory path
  if (path.parse(related).ext === '') {
    let indexPath = path.join(related, '/index.html')

    if (!await isDir(related) && flags.single === undefined) {
      return send(res, 404, notFoundResponse)
    }

    res.setHeader('Content-Type', mime.contentType(path.extname(indexPath)))

    if (!fs.existsSync(indexPath)) {
      // Try to render the current directory's content
      const renderedDir = await renderDirectory(related)

      // If it works, send the directory listing to the user
      if (renderedDir) {
        return send(res, 200, renderedDir)
      }

      // And if it doesn't, see if it's a single page application
      // If that's not true either, send an error
      if (!flags.single) {
        return send(res, 404, notFoundResponse)
      }

      // But IF IT IS true, load the SPA's root index file
      indexPath = path.join(current, '/index.html')
    }

    let indexContent

    try {
      indexContent = await fs.readFile(indexPath, 'utf8')
    } catch (err) {
      throw err
    }

    return send(res, 200, indexContent)
  }

  let body = 'Not able to load file!'
  let stats

  try {
    body = await fs.readFile(related)
    stats = await fs.stat(related)
  } catch (err) {
    throw err
  }

  const binaryStat = isBinary(path.parse(related).base, body)
  const getETag = s => '"' + s.dev + '-' + s.ino + '-' + s.mtime.getTime() + '"'

  let requestDate = req.headers['if-modified-since']
  let statusCode = 200

  if (requestDate) {
    requestDate = new Date(requestDate)

    if (requestDate.getTime() === stats.mtime.getTime()) {
      statusCode = 304
    }
  }

  const defaultHeaders = {
    'Cache-Control': 'public, max-age=' + flags.cache,
    Pragma: 'public',
    ETag: getETag(stats)
  }

  for (const header in defaultHeaders) {
    if (!{}.hasOwnProperty.call(defaultHeaders, header)) {
      continue
    }

    res.setHeader(header, defaultHeaders[header])
  }

  if (binaryStat) {
    res.statusCode = statusCode
    res.end(body, 'binary')
  } else {
    const decoder = new StringDecoder('utf8')
    const contentType = mime.contentType(path.extname(related)) || mime.contentType('text')

    res.setHeader('Content-Type', contentType)
    send(res, statusCode, decoder.write(body))
  }
}

const server = flags.unzipped ? micro(handler) : micro(compress(handler))

server.listen(flags.port, async () => {
  const details = server.address()

  process.on('SIGINT', () => {
    server.close()
    process.exit(0)
  })

  if (!await isDir(current)) {
    console.error(red('Specified directory doesn\'t exist!'))
    process.exit(1)
  }

  if (!process.env.NOW) {
    console.log(green(`Running on http://localhost:${details.port}`))
  }
})
